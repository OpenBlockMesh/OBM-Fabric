# Kubernetes Manifest file to create a Hyperledger Validating Peer Fabric
# Date : 22-08-2016
# Version 0.2
# Author : James Buckett (james.buckett@au1.ibm.com)
# Commissioned by ANZ Bank under direction of Ben Smillie (Ben.Smillie@anz.com)

# Important - Edit the following with values to match your environment
# name: CORE_VM_ENDPOINT
# value: "http://x.x.x.x:2375"

apiVersion: extensions/v1beta1
kind: Deployment

metadata:
  name: dep-pod-hl-vp1
  namespace: hyperledger
    
  labels:
    # Label of this Deployment Pod
    app: hl-vp1
    
# Replica Specifications
spec:
  # One copy of the fabric in case of consistency issues
  replicas: 1
  selector:
    matchLabels:
      app: hl-vp1
      
  template:
    metadata:
      labels:
        app: hl-vp1
        tier: validating-peer
        version: "08262016"
        environment: development
        provider: gke
        
    # Container Specifications
    spec:         
      containers:
      - name: vp1
        
        # Fabric Peer docker image for Hyperledger Project
        # https://github.com/hyperledger/fabric
        image: jamesbuckett/fabric-peer:08262016
        imagePullPolicy: Always
        
        # Readiness Check
        # Due to size of Hyperledger images allow some time for image download
        # The readiness probe will not be called until 60 seconds after the all containers in the pod are created. 
        # The readiness probe must respond within the 5 second timeout.
        readinessProbe:
          httpGet:
            # Ready Check via REST interface to /chain 
            path: "/chain"
            port: 5000
          initialDelaySeconds: 60
          timeoutSeconds: 5
        
        # Start as peer node
        command:
          - "peer"
        args:
          - "node"
          - "start"
        
        # Environment
        env:
          # Set this validating node as root - vp1
          - name: CORE_PEER_ID
            value: "vp1"
          # Root Node Service Location
          - name: CORE_PEER_DISCOVERY_ROOTNODE
            # value: "svc-hl-vp0.default.svc.cluster.local:30303"
            value: "svc-hl-vp0.hyperledger.svc.cluster.local:30303"
          - name: CORE_PEER_ADDRESSAUTODETECT
            value: "false"
          # Service name for the vp1  
          - name: CORE_PEER_ADDRESS
            # value: "svc-hl-vp1.default.svc.cluster.local:30303"
            value: "svc-hl-vp1.hyperledger.svc.cluster.local:30303"
          - name: CORE_PEER_NETWORKID
            value: "dev"
          - name: CORE_LOGGING_LEVEL
            # value: "debug"
            value: chaincode=debug:vm=debug:main=info
            # Enable pbft consensus
          - name: CORE_PEER_VALIDATOR_CONSENSUS_PLUGIN
            value: "pbft"
          - name: CORE_PBFT_GENERAL_MODE
            value: "batch"
          - name: CORE_PBFT_GENERAL__BATCHSIZE
            value: "2"                
            # Four nodes minimum for pbft protocol
          - name: CORE_PBFT_GENERAL_N
            value: "4"
          - name: CORE_PBFT_GENERAL_TIMEOUT_REQUEST
            value: "10s"
          - name: CORE_CHAINCODE_STARTUPTIMEOUT
            value: "10000"
          - name: CORE_CHAINCODE_DEPLOYTIMEOUT
            value: "120000"
            # Location for Chain Code Docker Engine
            # Change this value to match your environment
          - name: CORE_VM_ENDPOINT
            value: "http://x.x.x.x:2375"
        
        # Health Check
        livenessProbe:
          httpGet:
            # Health Check via REST interface to /chain 
            path: "/chain"
            port: 5000
          initialDelaySeconds: 30
          timeoutSeconds: 1
        
        # Communication Ports
        ports:
          # Peer service listening port
          - containerPort: 30303
          # CLI process use it for callbacks from chain code
          - containerPort: 30304
          # Event service on validating node
          - containerPort: 31315
          # REST service listening port
          - containerPort: 5000
          
      # Assign this pod to node-vp1 for node resilence
      nodeSelector:
        node: node-vp1          
--- 
apiVersion: extensions/v1beta1
kind: Deployment
#
metadata:
  name: dep-pod-hl-vp2
  namespace: hyperledger
    
  labels:
    # Label of this Deployment Pod
    app: hl-vp2
    
# Replica Specifications
spec:
  # One copy of the fabric in case of consistency issues
  replicas: 1
  selector:
    matchLabels:
      app: hl-vp2
      
  template:
    metadata:
      labels:
        app: hl-vp2
        tier: validating-peer
        version: "08262016"
        environment: development
        provider: gke
        
    # Container Specifications
    spec:         
      containers:
      - name: vp2
        
        # Fabric Peer docker image for Hyperledger Project
        # https://github.com/hyperledger/fabric
        # image: hyperledger/fabric-peer:latest
        image: jamesbuckett/fabric-peer:08262016
        imagePullPolicy: Always
        
        # Readiness Check
        # Due to size of Hyperledger images allow some time for image download
        # The readiness probe will not be called until 60 seconds after the all containers in the pod are created. 
        # The readiness probe must respond within the 5 second timeout.
        readinessProbe:
          httpGet:
            # Ready Check via REST interface to /chain 
            path: "/chain"
            port: 5000
          initialDelaySeconds: 60
          timeoutSeconds: 5        
        
        # Start as peer node
        command:
          - "peer"
        args:
          - "node"
          - "start"
        
        # Environment
        env:
          # Set this validating node as root - vp2
          - name: CORE_PEER_ID
            value: "vp2"
          # Root Node Service Location
          - name: CORE_PEER_DISCOVERY_ROOTNODE
            # value: "svc-hl-vp0.default.svc.cluster.local:30303"
            value: "svc-hl-vp0.hyperledger.svc.cluster.local:30303"
          - name: CORE_PEER_ADDRESSAUTODETECT
            value: "false"
          # Service name for the vp2  
          - name: CORE_PEER_ADDRESS
            # value: "svc-hl-vp2.default.svc.cluster.local:30303"   
            value: "svc-hl-vp2.hyperledger.svc.cluster.local:30303"            
          - name: CORE_PEER_NETWORKID
            value: "dev"
          - name: CORE_LOGGING_LEVEL
            # value: "debug"
            value: chaincode=debug:vm=debug:main=info
            # Enable pbft consensus
          - name: CORE_PEER_VALIDATOR_CONSENSUS_PLUGIN
            value: "pbft"
          - name: CORE_PBFT_GENERAL_MODE
            value: "batch"
          - name: CORE_PBFT_GENERAL__BATCHSIZE
            value: "2"    
            # Four nodes minimum for pbft protocol
          - name: CORE_PBFT_GENERAL_N
            value: "4"
          - name: CORE_PBFT_GENERAL_TIMEOUT_REQUEST
            value: "10s"
          - name: CORE_CHAINCODE_STARTUPTIMEOUT
            value: "10000"
          - name: CORE_CHAINCODE_DEPLOYTIMEOUT
            value: "120000"
            # Location for Chain Code Docker Engine
            # Change this value to match your environment
          - name: CORE_VM_ENDPOINT
            value: "http://x.x.x.x:2375"
        
        # Health Check
        livenessProbe:
          httpGet:
            # Health Check via REST interface to /chain 
            path: "/chain"
            port: 5000
          initialDelaySeconds: 30
          timeoutSeconds: 1
        
        # Communication Ports
        ports:
          # Peer service listening port
          - containerPort: 30303
          # CLI process use it for callbacks from chain code
          - containerPort: 30304
          # Event service on validating node
          - containerPort: 31315
          # REST service listening port
          - containerPort: 5000
          
      # Assign this pod to node-vp2 for node resilence
      nodeSelector:
        node: node-vp2          
--- 
apiVersion: extensions/v1beta1
kind: Deployment

metadata:
  name: dep-pod-hl-vp3
  namespace: hyperledger
    
  labels:
    # Label of this Deployment Pod
    app: hl-vp3
    
# Replica Specifications
spec:
  # One copy of the fabric in case of consistency issues
  replicas: 1
  selector:
    matchLabels:
      app: hl-vp3
      
  template:
    metadata:
      labels:
        app: hl-vp3
        tier: validating-peer
        version: "08262016"
        environment: development
        provider: gke
        
    # Container Specifications
    spec:         
      containers:
      - name: vp3
        
        # Fabric Peer docker image for Hyperledger Project
        # https://github.com/hyperledger/fabric
        # image: hyperledger/fabric-peer:latest
        image: jamesbuckett/fabric-peer:08262016
        imagePullPolicy: Always
      
        # Readiness Check
        # Due to size of Hyperledger images allow some time for image download
        # The readiness probe will not be called until 60 seconds after the all containers in the pod are created. 
        # The readiness probe must respond within the 5 second timeout.
        readinessProbe:
          httpGet:
            # Ready Check via REST interface to /chain 
            path: "/chain"
            port: 5000
          initialDelaySeconds: 60
          timeoutSeconds: 5        
        
        # Start as peer node
        command:
          - "peer"
        args:
          - "node"
          - "start"
        
        # Environment
        env:
          # Set this validating node as root - vp3
          - name: CORE_PEER_ID
            value: "vp3"
          # Root Node Service Location
          - name: CORE_PEER_DISCOVERY_ROOTNODE
            # value: "svc-hl-vp0.default.svc.cluster.local:30303"  
            value: "svc-hl-vp0.hyperledger.svc.cluster.local:30303"
          - name: CORE_PEER_ADDRESSAUTODETECT
            value: "false"
          # Service name for the vp3  
          - name: CORE_PEER_ADDRESS
            # value: "svc-hl-vp3.default.svc.cluster.local:30303" 
            value: "svc-hl-vp3.hyperledger.svc.cluster.local:30303"            
          - name: CORE_PEER_NETWORKID
            value: "dev"
          - name: CORE_LOGGING_LEVEL
            # value: "debug"
            value: chaincode=debug:vm=debug:main=info
            # Enable pbft consensus
          - name: CORE_PEER_VALIDATOR_CONSENSUS_PLUGIN
            value: "pbft"
          - name: CORE_PBFT_GENERAL_MODE
            value: "batch"
          - name: CORE_PBFT_GENERAL__BATCHSIZE
            value: "2"    
            # Four nodes minimum for pbft protocol
          - name: CORE_PBFT_GENERAL_N
            value: "4"
          - name: CORE_PBFT_GENERAL_TIMEOUT_REQUEST
            value: "10s"
          - name: CORE_CHAINCODE_STARTUPTIMEOUT
            value: "10000"
          - name: CORE_CHAINCODE_DEPLOYTIMEOUT
            value: "120000"
            # Location for Chain Code Docker Engine
            # Change this value to match your environment
          - name: CORE_VM_ENDPOINT
            value: "http://x.x.x.x:2375"
        
        # Health Check
        livenessProbe:
          httpGet:
            # Health Check via REST interface to /chain 
            path: "/chain"
            port: 5000
          initialDelaySeconds: 30
          timeoutSeconds: 1
        
        # Communication Ports
        ports:
          # Peer service listening port
          - containerPort: 30303
          # CLI process use it for callbacks from chain code
          - containerPort: 30304
          # Event service on validating node
          - containerPort: 31315
          # REST service listening port
          - containerPort: 5000
          
      # Assign this pod to node-vp3 for node resilence
      nodeSelector:
        node: node-vp3          